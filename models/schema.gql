"""All input for the create `Hero` mutation."""
input CreateHeroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Hero` to be created by this mutation."""
  hero: HeroInput!
}

"""The output of our create `Hero` mutation."""
type CreateHeroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hero` that was created by this mutation."""
  hero: Hero

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Hero`. May be used by Relay 1."""
  heroEdge(
    """The method to use when ordering `Hero`."""
    orderBy: [HeroesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteHeroById` mutation."""
input DeleteHeroByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteHero` mutation."""
input DeleteHeroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hero` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Hero` mutation."""
type DeleteHeroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hero` that was deleted by this mutation."""
  hero: Hero
  deletedHeroId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Hero`. May be used by Relay 1."""
  heroEdge(
    """The method to use when ordering `Hero`."""
    orderBy: [HeroesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroesEdge
}

type Hero implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
}

"""
A condition to be used against `Hero` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input HeroCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Hero` values."""
type HeroesConnection {
  """A list of `Hero` objects."""
  nodes: [Hero]!

  """
  A list of edges which contains the `Hero` and cursor to aid in pagination.
  """
  edges: [HeroesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Hero` you could get from the connection."""
  totalCount: Int!
}

"""A `Hero` edge in the connection."""
type HeroesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Hero` at the end of the edge."""
  node: Hero
}

"""Methods to use when ordering `Hero`."""
enum HeroesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Hero`"""
input HeroInput {
  id: Int
  name: String!
}

"""Represents an update to a `Hero`. Fields that are set will be updated."""
input HeroPatch {
  id: Int
  name: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Hero`."""
  createHero(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHeroInput!
  ): CreateHeroPayload

  """Updates a single `Hero` using its globally unique id and a patch."""
  updateHero(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeroInput!
  ): UpdateHeroPayload

  """Updates a single `Hero` using a unique key and a patch."""
  updateHeroById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeroByIdInput!
  ): UpdateHeroPayload

  """Deletes a single `Hero` using its globally unique id."""
  deleteHero(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeroInput!
  ): DeleteHeroPayload

  """Deletes a single `Hero` using a unique key."""
  deleteHeroById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeroByIdInput!
  ): DeleteHeroPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Hero`."""
  allHeroes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hero`."""
    orderBy: [HeroesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HeroCondition
  ): HeroesConnection
  heroById(id: Int!): Hero

  """Reads and enables pagination through a set of `Hero`."""
  herowithterm(
    term: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): HeroesConnection!

  """Reads a single `Hero` using its globally unique `ID`."""
  hero(
    """The globally unique `ID` to be used in selecting a single `Hero`."""
    nodeId: ID!
  ): Hero
}

"""All input for the `updateHeroById` mutation."""
input UpdateHeroByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Hero` being updated.
  """
  heroPatch: HeroPatch!
  id: Int!
}

"""All input for the `updateHero` mutation."""
input UpdateHeroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hero` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Hero` being updated.
  """
  heroPatch: HeroPatch!
}

"""The output of our update `Hero` mutation."""
type UpdateHeroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hero` that was updated by this mutation."""
  hero: Hero

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Hero`. May be used by Relay 1."""
  heroEdge(
    """The method to use when ordering `Hero`."""
    orderBy: [HeroesOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroesEdge
}
